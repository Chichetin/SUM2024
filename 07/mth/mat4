import vec3 from "./vec3";

let pi = 3.14159265359;

class _mat4 {
  constructor(m) {
    if (m == null) {
      this.m = [
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1],
      ];
    } else if (typeof m == "object" && m.length == 4) this.m = m;
    else this.m = m.m;
  }

  MatrSet(
    A00,
    A01,
    A02,
    A03,
    A10,
    A11,
    A12,
    A13,
    A20,
    A21,
    A22,
    A23,
    A30,
    A31,
    A32,
    A33,
  ) {
    return [
      [
        { A00, A01, A02, A03 },
        { A10, A11, A12, A13 },
        { A20, A21, A22, A23 },
        { A30, A31, A32, A33 },
      ],
    ];
  }

  MatrTranslate(T) {
    return MatrSet(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, T.x, T.y, T.z, 1);
  }

  MatrScale(Coeff) {
    return MatrSet(Coeff, 0, 0, 0, 0, Coeff, 0, 0, 0, 0, Coeff, 0, 0, 0, 0, 1);
  }
  MatrMulMatr(M2) {
    let i, j, k;
    r = [
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
    ];
    for (i = 0; i < 4; i++)
      for (j = 0; j < 4; j++)
        for (k = 0; k < 4; k++) r[i][j] += this.m[i][k] * M2.m[k][j];

    return r;
  }

  MatrMulMatr3(M2, M3) {
    return M1.MatrMulMatr(M2).MatrMulMatr(M3);
  }

  MatrTranspose() {
    return MatrSet(
      this.m[0][0],
      this.m[1][0],
      this.m[2][0],
      this.m[3][0],
      this.m[0][1],
      this.m[1][1],
      this.m[2][1],
      this.m[3][1],
      this.m[0][2],
      this.m[1][2],
      this.m[2][2],
      this.m[3][2],
      this.m[0][3],
      this.m[1][3],
      this.m[2][3],
      this.m[3][3],
    );
  }

  MatrDeterm3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33) {
    return (
      A11 * A22 * A33 +
      A12 * A23 * A31 +
      A13 * A21 * A32 -
      A11 * A23 * A32 -
      A12 * A21 * A33 -
      A13 * A22 * A31
    );
  }

  MatrDeterm() {
    return;
    +this.m[0][0] *
      MatrDeterm3x3(
        this.m[1][1],
        this.m[1][2],
        this.m[1][3],
        this.m[2][1],
        this.m[2][2],
        this.m[2][3],
        this.m[3][1],
        this.m[3][2],
        this.m[3][3],
      ) +
      -this.m[0][1] *
        MatrDeterm3x3(
          this.m[1][0],
          this.m[1][2],
          this.m[1][3],
          this.m[2][0],
          this.m[2][2],
          this.m[2][3],
          this.m[3][0],
          this.m[3][2],
          this.m[3][3],
        ) +
      +this.m[0][2] *
        MatrDeterm3x3(
          this.m[1][0],
          this.m[1][1],
          this.m[1][3],
          this.m[2][0],
          this.m[2][1],
          this.m[2][3],
          this.m[3][0],
          this.m[3][1],
          this.m[3][3],
        ) +
      -this.m[0][3] *
        MatrDeterm3x3(
          this.m[1][0],
          this.m[1][1],
          this.m[1][2],
          this.m[2][0],
          this.m[2][1],
          this.m[2][2],
          this.m[3][0],
          this.m[3][1],
          this.m[3][2],
        );
  } /* End of 'MatrDeterm' function */

  MatrInverse() {
    r = matr4();
    det = this.MatrDeterm;

    if (det == 0) return r;

    /* build adjoINT matrix */
    r.m[0][0] =
      +MatrDeterm3x3(
        this.m[1][1],
        this.m[1][2],
        this.m[1][3],
        this.m[2][1],
        this.m[2][2],
        this.m[2][3],
        this.m[3][1],
        this.m[3][2],
        this.m[3][3],
      ) / det;

    r.m[1][0] =
      -MatrDeterm3x3(
        this.m[1][0],
        this.m[1][2],
        this.m[1][3],
        this.m[2][0],
        this.m[2][2],
        this.m[2][3],
        this.m[3][0],
        this.m[3][2],
        this.m[3][3],
      ) / det;

    r.m[2][0] =
      +MatrDeterm3x3(
        this.m[1][0],
        this.m[1][1],
        this.m[1][3],
        this.m[2][0],
        this.m[2][1],
        this.m[2][3],
        this.m[3][0],
        this.m[3][1],
        this.m[3][3],
      ) / det;

    r.m[3][0] =
      -MatrDeterm3x3(
        this.m[1][0],
        this.m[1][1],
        this.m[1][2],
        this.m[2][0],
        this.m[2][1],
        this.m[2][2],
        this.m[3][0],
        this.m[3][1],
        this.m[3][2],
      ) / det;

    r.m[0][1] =
      -MatrDeterm3x3(
        this.m[0][1],
        this.m[0][2],
        this.m[0][3],
        this.m[2][1],
        this.m[2][2],
        this.m[2][3],
        this.m[3][1],
        this.m[3][2],
        this.m[3][3],
      ) / det;

    r.m[1][1] =
      +MatrDeterm3x3(
        this.m[0][0],
        this.m[0][2],
        this.m[0][3],
        this.m[2][0],
        this.m[2][2],
        this.m[2][3],
        this.m[3][0],
        this.m[3][2],
        this.m[3][3],
      ) / det;

    r.m[2][1] =
      -MatrDeterm3x3(
        this.m[0][0],
        this.m[0][1],
        this.m[0][3],
        this.m[2][0],
        this.m[2][1],
        this.m[2][3],
        this.m[3][0],
        this.m[3][1],
        this.m[3][3],
      ) / det;

    r.m[3][1] =
      +MatrDeterm3x3(
        this.m[0][0],
        this.m[0][1],
        this.m[0][2],
        this.m[2][0],
        this.m[2][1],
        this.m[2][2],
        this.m[3][0],
        this.m[3][1],
        this.m[3][2],
      ) / det;

    r.m[0][2] =
      +MatrDeterm3x3(
        this.m[0][1],
        this.m[0][2],
        this.m[0][3],
        this.m[1][1],
        this.m[1][2],
        this.m[1][3],
        this.m[3][1],
        this.m[3][2],
        this.m[3][3],
      ) / det;

    r.m[1][2] =
      -MatrDeterm3x3(
        this.m[0][0],
        this.m[0][2],
        this.m[0][3],
        this.m[1][0],
        this.m[1][2],
        this.m[1][3],
        this.m[3][0],
        this.m[3][2],
        this.m[3][3],
      ) / det;

    r.m[2][2] =
      +MatrDeterm3x3(
        this.m[0][0],
        this.m[0][1],
        this.m[0][3],
        this.m[1][0],
        this.m[1][1],
        this.m[1][3],
        this.m[3][0],
        this.m[3][1],
        this.m[3][3],
      ) / det;

    r.m[3][2] =
      -MatrDeterm3x3(
        this.m[0][0],
        this.m[0][1],
        this.m[0][2],
        this.m[1][0],
        this.m[1][1],
        this.m[1][2],
        this.m[3][0],
        this.m[3][1],
        this.m[3][2],
      ) / det;

    r.m[0][3] =
      -MatrDeterm3x3(
        this.m[0][1],
        this.m[0][2],
        this.m[0][3],
        this.m[1][1],
        this.m[1][2],
        this.m[1][3],
        this.m[2][1],
        this.m[2][2],
        this.m[2][3],
      ) / det;

    r.m[1][3] =
      +MatrDeterm3x3(
        this.m[0][0],
        this.m[0][2],
        this.m[0][3],
        this.m[1][0],
        this.m[1][2],
        this.m[1][3],
        this.m[2][0],
        this.m[2][2],
        this.m[2][3],
      ) / det;

    r.m[2][3] =
      -MatrDeterm3x3(
        this.m[0][0],
        this.m[0][1],
        this.m[0][3],
        this.m[1][0],
        this.m[1][1],
        this.m[1][3],
        this.m[2][0],
        this.m[2][1],
        this.m[2][3],
      ) / det;

    r.m[3][3] =
      +MatrDeterm3x3(
        this.m[0][0],
        this.m[0][1],
        this.m[0][2],
        this.m[1][0],
        this.m[1][1],
        this.m[1][2],
        this.m[2][0],
        this.m[2][1],
        this.m[2][2],
      ) / det;

    return r;
  }
}

MatrView(Loc, At, Up1);
{
  let Dir = vec3(At).sub(Loc).normalize,
    Right = vec3(Dir).cross(Up1).normalize,
    Up = vec3(Right).cross(Dir);
  m = matr4(
    [][
      ([Right.x, Up.x, -Dir.x, 0],
      [Right.y, Up.y, -Dir.y, 0],
      [Right.z, Up.z, -Dir.z, 0],
      [-vec3(Loc).dot(Right), -vec3(Loc).dot(Up), vec3(Loc).dot(Dir), 1])
    ],
  );

  return m;
}

MatrFrustum(l, r, b, t, n, f);
{
  return MatrSet(
    (2 * n) / (r - l),
    0,
    0,
    0,
    0,
    (2 * n) / (t - b),
    0,
    0,
    (r + l) / (r - l),
    (t + b) / (t - b),
    -(f + n) / (f - n),
    -1,
    0,
    0,
    (-2 * n * f) / (f - n),
    0,
  );
}

export default function matr4(...args) {
  return new _matr4(...args);
}
